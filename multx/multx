#!/bin/sh
################################################################################
################################################################################
# multx
#
# Copyright (c) 2016-2024, James S. Crook
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# The views and conclusions contained in the software and documentation are those
# of the authors and should not be interpreted as representing official policies,
# either expressed or implied, of the FreeBSD Project.
################################################################################
################################################################################
#
# The multx script provides one way of executing the same command on multiple
# UNIX/Linux systems very easily and quickly. It is most useful when used in
# combination with ssh-agent and when public key authentication is configured
# on the hostnames of interest.
#
# This script is really meant to be used a template. That is, it will very
# likely be more useful if it's modified to suit your particular environment.
################################################################################
VERSION=1.1.0
PROG=$(basename $0)

### Define initial/default values
USERCONFIRMATIONFLAG=0
BACKGROUNDFLAG=0
QUIETFLAG=0
LOCALEXECUTIONFLAG=0
SSHARGS=" "		# single space means no ssh options (used for prettier output)
TARGETHOSTS=""
OUTPUTFILENAMETEMPLATE=""

### Define hostname group(s) and options
HOST_GROUP_F="fred wilma"		# Flintstones
HOST_GROUP_R="barney betty"		# Rubbles
HOST_GROUP_K="pebbles bamm-bamm"	# Kids
HOST_GROUP_a="$HOST_GROUP_F $HOST_GROUP_R $HOST_GROUP_K"

OPTIONS="FRKabch:f:lo:qs:x:"

### Parse command line argument
while getopts "$OPTIONS" OPTION; do
    case $OPTION in
	F) TARGETHOSTS="$TARGETHOSTS $HOST_GROUP_F";;
	R) TARGETHOSTS="$TARGETHOSTS $HOST_GROUP_R";;
	K) TARGETHOSTS="$TARGETHOSTS $HOST_GROUP_K";;
	a) TARGETHOSTS="$TARGETHOSTS $HOST_GROUP_a";;
	b) BACKGROUNDFLAG=1;;
	c) USERCONFIRMATIONFLAG=1;;
	h) TARGETHOSTS="$TARGETHOSTS $OPTARG";;
	f)  if [ -r $OPTARG ]; then
		TARGETHOSTS="$TARGETHOSTS $(grep -v '^#' $OPTARG)"
	    else
		echo "$PROG: cannot read file '$OPTARG'"
	    fi;;
	l) LOCALEXECUTIONFLAG=1;;
	o) OUTPUTFILENAMETEMPLATE="$OPTARG";;
	q) QUIETFLAG=1;;
	s) SSHARGS="${SSHARGS}$OPTARG ";;
	x) TARGETHOSTS=$(echo "$TARGETHOSTS" | awk -v optarg="$OPTARG" '{gsub(optarg, ""); print $0}');;
    esac
done
shift $((OPTIND-1))

RUNCOMMAND=$*

### Display the usage message if no command has been specified
if [ "$RUNCOMMAND" == "" ]; then
    echo "usage (version $VERSION):
$PROG [option(s)] remote_command
  Where options are: $OPTIONS
    -F			:+ hostnames: $HOST_GROUP_F
    -R			:+ hostnames: $HOST_GROUP_R
    -K			:+ hostnames: $HOST_GROUP_K
    -a			:+ hostnames: $HOST_GROUP_a
    -b			:  background mode
    -c			:  confirmation mode
    -h host_list	:+ add a hostname or 'hostname_1 ... hostname_n'
    -f file		:+ read a file containing hostname(s)
    -l                  :  execute the command on the local (initiating) host
                           e.g.: multx -al 'scp /etc/hosts \${MULTXTARGET}:/tmp'
    -o outfile_template	:  output file pattern (\"'\${MULTXTARGET}.info'\" is a useful choice)
    -q			:  quiet mode
    -s ssh_arg(s)	:+ arguments to be passed to ssh
    -x ERE		:+ eXclude all/part of hostname(s) containing this ERE (pattern)
    '+' options may be used more than once and/or combined with others
    Note: \$MT works the same as \$MULTXTARGET.
multx Copyright (C) 2016-2024 James S. Crook
This program comes with ABSOLUTELY NO WARRANTY and is distributed under the FreeBSD license."
    exit 0
fi

if [ "$TARGETHOSTS" == "" ]; then
    echo "[E: *** No hostnames have been specified, aborting. ***]"
    exit 1
fi

if [ $LOCALEXECUTIONFLAG -ne 0 -a \( "$OUTPUTFILENAMETEMPLATE" != "" -o "$SSHARGS" != " " \) ]; then
    echo "[W: *** When '-l' is used, both the '-o' and '-s' options are ignored. ***]"
fi

if [ $USERCONFIRMATIONFLAG -ne 0 ]; then
						       # echo used to remove any extraneous whitespace(s)
    printf "[q: Execute <ssh${SSHARGS}$RUNCOMMAND> on <$(echo $TARGETHOSTS)> (y/n)?]"
    read USERREPLY
    LOWERCASEUSERREPLY=$(echo $USERREPLY | tr A-Z a-z)
    case $LOWERCASEUSERREPLY in
	y|yes)	LOWERCASEUSERREPLY="y";;
	*)	LOWERCASEUSERREPLY="n";;
    esac
else
    LOWERCASEUSERREPLY="y"
fi

if [ "$LOWERCASEUSERREPLY" == "y" ]; then
    echo "[i: $(date) : $PROG begin]"

    # Loop through all the specified target host(s)
    for MULTXTARGET in $TARGETHOSTS; do
	MT=$MULTXTARGET			# $MT (short form) works the same as $MULTXTARGET

	# Set LOCALCOMMAND for for each of these 3 cases:
	#    a) Call ssh on the local/initiating system that runs a command on each target host.
	#       Send target's stdout and stderr to the local/initiating system's stdout & stderr.
	#    b) Call ssh on the local/initiating system that runs a command on each target host.
	#       Send target's stdout to a file on the local/initiating system. stderr as above.
	#    c) Set LOCALCOMMAND to the command to be be run on the local/initiating system
	#       (RUNCOMMAND).
	# Then run LOCALCOMMAND either in the foreground or background (for each target host).

	if [ $LOCALEXECUTIONFLAG -eq 0 ]; then
	    # Cases a and b
	    if [ "$OUTPUTFILENAMETEMPLATE" == "" ]; then
		# Case a
		LOCALCOMMAND="ssh${SSHARGS}$MULTXTARGET '$RUNCOMMAND'"
	    else
		# Case b
		LOCALOUTPUTFILE=$(eval echo $OUTPUTFILENAMETEMPLATE)
		LOCALCOMMAND="ssh${SSHARGS}$MULTXTARGET '$RUNCOMMAND' > '$LOCALOUTPUTFILE'"
	    fi
	else
	    # Case c
	    LOCALCOMMAND=$RUNCOMMAND
	fi

	# Display the command details, unless quiet mode has been selected
	if [ $QUIETFLAG -eq 0 ]; then echo "[i: $MULTXTARGET === <$LOCALCOMMAND> ===]"; fi

	if [ $BACKGROUNDFLAG -eq 0 ]; then
	    eval "$LOCALCOMMAND"	# Run in the foreground (synchronous/sequential)
	else
	    eval "$LOCALCOMMAND" &	# Run in the background (asynchronous/parallel)
	fi

	if [ $QUIETFLAG -eq 0 ]; then echo; fi
    done
    wait	# No effect in foreground mode
    echo "[i: $(date) : $PROG end]"
else
    echo "[i: $PROG exiting]"
fi

exit 0
